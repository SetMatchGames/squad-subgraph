// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BuyLicense extends ethereum.Event {
  get params(): BuyLicense__Params {
    return new BuyLicense__Params(this);
  }
}

export class BuyLicense__Params {
  _event: BuyLicense;

  constructor(event: BuyLicense) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get contributionId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get licenseId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[3].value.toString();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class NewContribution extends ethereum.Event {
  get params(): NewContribution__Params {
    return new NewContribution__Params(this);
  }
}

export class NewContribution__Params {
  _event: NewContribution;

  constructor(event: NewContribution) {
    this._event = event;
  }

  get contributor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get contributionId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get beneficiary(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get feeRate(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get purchasePrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get bondingCurve(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get metadata(): string {
    return this._event.parameters[7].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RecoverReserveDust extends ethereum.Event {
  get params(): RecoverReserveDust__Params {
    return new RecoverReserveDust__Params(this);
  }
}

export class RecoverReserveDust__Params {
  _event: RecoverReserveDust;

  constructor(event: RecoverReserveDust) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetNetworkFeeRate extends ethereum.Event {
  get params(): SetNetworkFeeRate__Params {
    return new SetNetworkFeeRate__Params(this);
  }
}

export class SetNetworkFeeRate__Params {
  _event: SetNetworkFeeRate;

  constructor(event: SetNetworkFeeRate) {
    this._event = event;
  }

  get from(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get to(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get withdrawAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get networkFeePaid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SquadController__contributionsResult {
  value0: Address;
  value1: i32;
  value2: BigInt;

  constructor(value0: Address, value1: i32, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class SquadController extends ethereum.SmartContract {
  static bind(address: Address): SquadController {
    return new SquadController("SquadController", address);
  }

  accounting(): Address {
    let result = super.call("accounting", "accounting():(address)", []);

    return result[0].toAddress();
  }

  try_accounting(): ethereum.CallResult<Address> {
    let result = super.tryCall("accounting", "accounting():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bondingCurveFactory(): Address {
    let result = super.call(
      "bondingCurveFactory",
      "bondingCurveFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_bondingCurveFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bondingCurveFactory",
      "bondingCurveFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  contributions(param0: Bytes): SquadController__contributionsResult {
    let result = super.call(
      "contributions",
      "contributions(bytes32):(address,uint16,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new SquadController__contributionsResult(
      result[0].toAddress(),
      result[1].toI32(),
      result[2].toBigInt()
    );
  }

  try_contributions(
    param0: Bytes
  ): ethereum.CallResult<SquadController__contributionsResult> {
    let result = super.tryCall(
      "contributions",
      "contributions(bytes32):(address,uint16,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SquadController__contributionsResult(
        value[0].toAddress(),
        value[1].toI32(),
        value[2].toBigInt()
      )
    );
  }

  curve(): Address {
    let result = super.call("curve", "curve():(address)", []);

    return result[0].toAddress();
  }

  try_curve(): ethereum.CallResult<Address> {
    let result = super.tryCall("curve", "curve():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exists(contributionId: Bytes): boolean {
    let result = super.call("exists", "exists(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(contributionId)
    ]);

    return result[0].toBoolean();
  }

  try_exists(contributionId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(contributionId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  holdsLicense(
    contributionId: Bytes,
    licenseId: BigInt,
    account: Address
  ): boolean {
    let result = super.call(
      "holdsLicense",
      "holdsLicense(bytes32,uint256,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(contributionId),
        ethereum.Value.fromUnsignedBigInt(licenseId),
        ethereum.Value.fromAddress(account)
      ]
    );

    return result[0].toBoolean();
  }

  try_holdsLicense(
    contributionId: Bytes,
    licenseId: BigInt,
    account: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "holdsLicense",
      "holdsLicense(bytes32,uint256,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(contributionId),
        ethereum.Value.fromUnsignedBigInt(licenseId),
        ethereum.Value.fromAddress(account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxNetworkFeeRate(): i32 {
    let result = super.call(
      "maxNetworkFeeRate",
      "maxNetworkFeeRate():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_maxNetworkFeeRate(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "maxNetworkFeeRate",
      "maxNetworkFeeRate():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  networkFeeRate(): i32 {
    let result = super.call("networkFeeRate", "networkFeeRate():(uint16)", []);

    return result[0].toI32();
  }

  try_networkFeeRate(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "networkFeeRate",
      "networkFeeRate():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceOf(contributionId: Bytes, supply: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "priceOf",
      "priceOf(bytes32,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(contributionId),
        ethereum.Value.fromUnsignedBigInt(supply),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_priceOf(
    contributionId: Bytes,
    supply: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "priceOf",
      "priceOf(bytes32,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(contributionId),
        ethereum.Value.fromUnsignedBigInt(supply),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserveDust(): BigInt {
    let result = super.call("reserveDust", "reserveDust():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reserveDust(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reserveDust", "reserveDust():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenAddress(contributionId: Bytes): Address {
    let result = super.call("tokenAddress", "tokenAddress(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(contributionId)
    ]);

    return result[0].toAddress();
  }

  try_tokenAddress(contributionId: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenAddress",
      "tokenAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(contributionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenClaimCheck(): Address {
    let result = super.call(
      "tokenClaimCheck",
      "tokenClaimCheck():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_tokenClaimCheck(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenClaimCheck",
      "tokenClaimCheck():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupplyOf(contributionId: Bytes): BigInt {
    let result = super.call(
      "totalSupplyOf",
      "totalSupplyOf(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(contributionId)]
    );

    return result[0].toBigInt();
  }

  try_totalSupplyOf(contributionId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupplyOf",
      "totalSupplyOf(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(contributionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  validLicenses(param0: BigInt): Bytes {
    let result = super.call(
      "validLicenses",
      "validLicenses(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBytes();
  }

  try_validLicenses(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "validLicenses",
      "validLicenses(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _bondingCurveFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenClaimCheck(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _networkFeeRate(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _maxNetworkFeeRate(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _treasury(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _curve(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyLicenseCall extends ethereum.Call {
  get inputs(): BuyLicenseCall__Inputs {
    return new BuyLicenseCall__Inputs(this);
  }

  get outputs(): BuyLicenseCall__Outputs {
    return new BuyLicenseCall__Outputs(this);
  }
}

export class BuyLicenseCall__Inputs {
  _call: BuyLicenseCall;

  constructor(call: BuyLicenseCall) {
    this._call = call;
  }

  get contributionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyLicenseCall__Outputs {
  _call: BuyLicenseCall;

  constructor(call: BuyLicenseCall) {
    this._call = call;
  }
}

export class NewContributionCall extends ethereum.Call {
  get inputs(): NewContributionCall__Inputs {
    return new NewContributionCall__Inputs(this);
  }

  get outputs(): NewContributionCall__Outputs {
    return new NewContributionCall__Outputs(this);
  }
}

export class NewContributionCall__Inputs {
  _call: NewContributionCall;

  constructor(call: NewContributionCall) {
    this._call = call;
  }

  get contributionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get beneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get feeRate(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get purchasePrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[4].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[5].value.toString();
  }

  get metadata(): string {
    return this._call.inputValues[6].value.toString();
  }
}

export class NewContributionCall__Outputs {
  _call: NewContributionCall;

  constructor(call: NewContributionCall) {
    this._call = call;
  }
}

export class RecoverReserveDustCall extends ethereum.Call {
  get inputs(): RecoverReserveDustCall__Inputs {
    return new RecoverReserveDustCall__Inputs(this);
  }

  get outputs(): RecoverReserveDustCall__Outputs {
    return new RecoverReserveDustCall__Outputs(this);
  }
}

export class RecoverReserveDustCall__Inputs {
  _call: RecoverReserveDustCall;

  constructor(call: RecoverReserveDustCall) {
    this._call = call;
  }
}

export class RecoverReserveDustCall__Outputs {
  _call: RecoverReserveDustCall;

  constructor(call: RecoverReserveDustCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SellTokensCall extends ethereum.Call {
  get inputs(): SellTokensCall__Inputs {
    return new SellTokensCall__Inputs(this);
  }

  get outputs(): SellTokensCall__Outputs {
    return new SellTokensCall__Outputs(this);
  }
}

export class SellTokensCall__Inputs {
  _call: SellTokensCall;

  constructor(call: SellTokensCall) {
    this._call = call;
  }

  get contributionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SellTokensCall__Outputs {
  _call: SellTokensCall;

  constructor(call: SellTokensCall) {
    this._call = call;
  }
}

export class SetNetworkFeeRateCall extends ethereum.Call {
  get inputs(): SetNetworkFeeRateCall__Inputs {
    return new SetNetworkFeeRateCall__Inputs(this);
  }

  get outputs(): SetNetworkFeeRateCall__Outputs {
    return new SetNetworkFeeRateCall__Outputs(this);
  }
}

export class SetNetworkFeeRateCall__Inputs {
  _call: SetNetworkFeeRateCall;

  constructor(call: SetNetworkFeeRateCall) {
    this._call = call;
  }

  get from(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get to(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetNetworkFeeRateCall__Outputs {
  _call: SetNetworkFeeRateCall;

  constructor(call: SetNetworkFeeRateCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
