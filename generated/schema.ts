// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Contribution extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Contribution entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Contribution entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Contribution", id.toString(), this);
  }

  static load(id: string): Contribution | null {
    return store.get("Contribution", id) as Contribution | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get beneficiary(): Bytes {
    let value = this.get("beneficiary");
    return value.toBytes();
  }

  set beneficiary(value: Bytes) {
    this.set("beneficiary", Value.fromBytes(value));
  }

  get feeRate(): i32 {
    let value = this.get("feeRate");
    return value.toI32();
  }

  set feeRate(value: i32) {
    this.set("feeRate", Value.fromI32(value));
  }

  get purchasePrice(): BigInt {
    let value = this.get("purchasePrice");
    return value.toBigInt();
  }

  set purchasePrice(value: BigInt) {
    this.set("purchasePrice", Value.fromBigInt(value));
  }

  get supply(): BigInt {
    let value = this.get("supply");
    return value.toBigInt();
  }

  set supply(value: BigInt) {
    this.set("supply", Value.fromBigInt(value));
  }
}

export class License extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save License entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save License entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("License", id.toString(), this);
  }

  static load(id: string): License | null {
    return store.get("License", id) as License | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get contribution(): string {
    let value = this.get("contribution");
    return value.toString();
  }

  set contribution(value: string) {
    this.set("contribution", Value.fromString(value));
  }
}
